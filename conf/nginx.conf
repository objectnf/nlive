daemon off;
user  nobody;
worker_processes  10;

error_log  /dev/stdout;

pid        /nginx/logs/nginx.pid;

events {
    use epoll;
    worker_connections  1024;
}

rtmp_auto_push on;

rtmp {
    access_log /dev/stdout;
    log_format '$remote_addr [$time_local] $command "$app" "$name" "$args" - '
               '$bytes_received $bytes_sent "$pageurl" "$flashver" ($session_readable_time)';

    server {
        listen 1935;
        timeout 30s;
        max_streams 200;
        ack_window 2500000;
        chunk_size 6144;
        
        application backup {
            live on;
        }

        application transcode {
            live on;

            hls on;
            wait_key on;
            hls_path /nginx/html/hls/transcode;
            hls_fragment 3s;
            hls_playlist_length 60s;
            hls_nested on;
            # hls_keys on;
            # hls_fragments_per_key 10;
            hls_cleanup on;

            dash off;
            dash_path /nginx/html/dash/transcode;
            dash_fragment 3s;
            dash_playlist_length 60s;
            dash_nested on;
            dash_cleanup on;

        }

        application vod {
            play /nginx/html/vod /nginx/html/record;
        }

        application live {
            live on;

            exec_options on;
            exec_kill_signal 9;

            record off;
            record_path /nginx/html/record;
            recorder video {
                record all;
                record_lock on;
                record_unique on;
                record_interval 30m;
                record_suffix -%d-%b-%y-%T.flv;
            }

            # HLS-ready stream (h.264 + aac) and audio stream
            exec_push ffmpeg -re -i rtmp://localhost/live/$name -threads 4 -c copy -f flv -y rtmp://localhost/transcode/$name_hls;
            exec_push ffmpeg -re -i rtmp://localhost/live/$name -threads 4 -vn -c:a copy -f flv -y rtmp://localhost/transcode/$name_audio;
            
            # # Transcoded stream (not h.264 + aac)
            # exec_push ffmpeg -re -i rtmp://localhost/live/$name -threads 4 -c:v libx264 -profile:v high -preset superfast -c:a aac -f flv -y rtmp://localhost/transcode/$name;
            # exec_push ffmpeg -re -i rtmp://localhost/live/$name -threads 4 -vn -c:a aac -f flv -y rtmp://localhost/transcode/$name_audio;
            # # 1080p
            # exec_push ffmpeg -re -i rtmp://localhost/live/$name -threads 4 -c:v libx264 -vf scale=-1:1080 -b:v 4600K -profile:v high -preset superfast -c:a aac -b:a 320K -f flv -y rtmp://localhost/transcode/$name_1080p;
            # # 720p
            # exec_push ffmpeg -re -i rtmp://localhost/live/$name -threads 4 -c:v libx264 -vf scale=-1:720 -b:v 3500K -profile:v high -preset superfast -c:a aac -b:a 250K -f flv -y rtmp://localhost/transcode/$name_720p;
            # # 480p
            # exec_push ffmpeg -re -i rtmp://localhost/live/$name -threads 4 -c:v libx264 -vf scale=-1:480 -b:v 2000K -profile:v high -preset superfast -c:a aac -b:a 128K -f flv -y rtmp://localhost/transcode/$name_480p;
            # # 360p
            # exec_push ffmpeg -re -i rtmp://localhost/live/$name -threads 4 -c:v libx264 -vf scale=-1:360 -b:v 1500K -profile:v high -preset superfast -c:a aac -b:a 128K -f flv -y rtmp://localhost/transcode/$name_360p;
        
        }
    }
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /dev/stdout  main;

    sendfile        on;

    keepalive_timeout  65;

    gzip  on;

    server {
        listen       80;
        server_name  localhost;

        access_log  /dev/stdout  main;

        location / {
            root   /nginx/html;
            index  index.html index.htm;
        }

        error_page  404              /404.html;

        error_page   500 502 503 504  /50x.html;

        location = /50x.html {
            root   /nginx/html;
        }

        location = /404.html {
            root   /nginx/html;
        }

        location /hls {
            types {
                application/vnd.apple.mpegurl m3u8;
            }
            root /nginx/html;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin * always;
        }
        
        location /dash {
            root /nginx/html;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin * always;
        }

        location /control {
            rtmp_control all;
            add_header Access-Control-Allow-Origin * always;
        }
        
        location /live {
            flv_live on;
            chunked_transfer_encoding  on;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin * always;
        }

        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
        }

        location /stat.xsl {
            root /nginx/html;
        }
    }
}
